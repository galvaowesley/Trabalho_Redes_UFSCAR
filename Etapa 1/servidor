#!/usr/bin/python3

# seu código aqui
import socket
import select


# Cria um socket 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# Habita a opção SO_REUSEADDR
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
# Designa a porta 7000 ao socket e o permite escutá-la
s.bind(('', 7000))
s.listen(5)
# Cria uma lista para sockets
sockets_lista = [s]
# Cria uma lista(dicionário) para demais conexões de outros clientes
lista_apelidos = {}
# Lista a ser usada no Passo 5 (AINDA NÃO USADA)
lista_msgs = {}

# Buffering 
# Valores de retorno:
# 1: mensagem terminada com \n pronto para ser tratada
# 2: conexão fechada
# 3: lido um caracterer diferente de \n, não faz nada
def recvline(conexao):
    data = conexao.recv(1) 
    lista_msgs[conexao] += data
    if data == b"\n":
        return 1
    elif not data:
        return 2
    else: 
        return 3


# Envia mensagem para todos os usuários conectados
def mensagem_para_todos(mensagem):
    for sock in lista_apelidos:
        sock.send(mensagem)
        
while True:
    leitura_sockets, _, _ = select.select(sockets_lista, [], [])
    for socket_notificado in leitura_sockets:
        # Há uma nova conexão pendente para ser aceita
        if socket_notificado == s:
            conexao, endereco = s.accept()
            sockets_lista.append(conexao) 
            # Adiciona a nova conexão ao dicionário com valor False indicando que não foi definido o apelido (nick)   
            lista_apelidos[conexao]=False    
            lista_msgs[conexao] = b""             
        else:
            data = recvline(socket_notificado)
            # Indica que uma conexão foi fechada, removendo da lista de conexões ativas e enviando mensagem a todos do chat
            if data == 2: 
                sockets_lista.remove(socket_notificado)
                if lista_apelidos[socket_notificado] != False:
                    mensagem = "/quit " + ''.join(lista_apelidos[socket_notificado]) + "\n"
                    mensagem_para_todos(mensagem.encode())
                del lista_apelidos[socket_notificado]
                del lista_msgs[socket_notificado]
                socket_notificado.close()
            # Divide a mensagem recebida para identificar se é um comando para criar/editar o nick ou mandar uma mensagem para o chat
            elif data == 1:
                data = lista_msgs[socket_notificado].decode()
                data = data.split()
                if data!=[] and data[0] == "/nick":
                    # Verifica se o nick não possui os caracteres ':' ou ' ' e se já não existe um nick igual pertencente a outra conexão
                    if data[1:data.__len__()].count(':') > 0 or data[1:data.__len__()].count(' ')>0 or data[1:data.__len__()] in lista_apelidos.values():
                        socket_notificado.send(b"/error\n")
                    else:
                        # Define um apelido para a conexão, avisando a todos do chat
                        if lista_apelidos[socket_notificado] == False:
                            lista_apelidos[socket_notificado] = data[1:data.__len__()]
                            mensagem = "/joined " + ''.join(lista_apelidos[socket_notificado]) + "\n"
                            mensagem_para_todos(mensagem.encode())
                        # Renomeia o apelido para a conexão, avisando a todos do chat
                        else:
                            mensagem = "/renamed " + ''.join(lista_apelidos[socket_notificado]) + " "+ ''.join(data[1:data.__len__()]) +"\n"
                            mensagem_para_todos(mensagem.encode())
                            lista_apelidos[socket_notificado] = data[1:data.__len__()]
                else:
                    # Erro caso uma conexão tente enviar uma mensagem sem antes ter definido um apelido para si
                    if lista_apelidos[socket_notificado] == False:
                        socket_notificado.send(b"/error\n")
                    # Uma mensagem é enviada a todos no chat
                    else:
                        mensagem = ''.join(lista_apelidos[socket_notificado]) + ": "+ ''.join(data) +"\n"
                        mensagem_para_todos(mensagem.encode())
                lista_msgs[socket_notificado] = b""